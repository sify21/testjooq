/*
 * This file is generated by jOOQ.
 */
package com.test.db.tables;


import com.test.db.Public;
import com.test.db.tables.records.MergePersonRecord;
import com.test.db.udt.Dressing;
import com.test.db.udt.records.DressingRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MergePerson extends TableImpl<MergePersonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.merge_person</code>
     */
    public static final MergePerson MERGE_PERSON = new MergePerson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MergePersonRecord> getRecordType() {
        return MergePersonRecord.class;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<MergePersonRecord, Object> MERGE_PERSON_ = createField(DSL.name("merge_person"), DefaultDataType.getDefaultDataType("\"dressing\""), this, "");

    private MergePerson(Name alias, Table<MergePersonRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, Dressing.DRESSING.getDataType().array())
        });
    }

    private MergePerson(Name alias, Table<MergePersonRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private MergePerson(Name alias, Table<MergePersonRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>public.merge_person</code> table reference
     */
    public MergePerson(String alias) {
        this(DSL.name(alias), MERGE_PERSON);
    }

    /**
     * Create an aliased <code>public.merge_person</code> table reference
     */
    public MergePerson(Name alias) {
        this(alias, MERGE_PERSON);
    }

    /**
     * Create a <code>public.merge_person</code> table reference
     */
    public MergePerson() {
        this(DSL.name("merge_person"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public MergePerson as(String alias) {
        return new MergePerson(DSL.name(alias), this, parameters);
    }

    @Override
    public MergePerson as(Name alias) {
        return new MergePerson(alias, this, parameters);
    }

    @Override
    public MergePerson as(Table<?> alias) {
        return new MergePerson(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public MergePerson rename(String name) {
        return new MergePerson(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public MergePerson rename(Name name) {
        return new MergePerson(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public MergePerson rename(Table<?> name) {
        return new MergePerson(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public MergePerson call(
          DressingRecord[] arr
    ) {
        MergePerson result = new MergePerson(DSL.name("merge_person"), null, new Field[] {
            DSL.val(arr, Dressing.DRESSING.getDataType().array())
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public MergePerson call(
          Field<DressingRecord[]> arr
    ) {
        MergePerson result = new MergePerson(DSL.name("merge_person"), null, new Field[] {
            arr
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
