/*
 * This file is generated by jOOQ.
 */
package com.test.db.udt;


import com.test.Address;
import com.test.db.Public;
import com.test.db.udt.records.DressingRecord;

import java.util.List;

import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;
import org.jooq.jackson.extensions.converters.JSONBtoJacksonConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Dressing extends UDTImpl<DressingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dressing</code>
     */
    public static final Dressing DRESSING = new Dressing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DressingRecord> getRecordType() {
        return DressingRecord.class;
    }

    /**
     * The attribute <code>public.dressing.id</code>.
     */
    public static final UDTField<DressingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, DRESSING, "");

    /**
     * The attribute <code>public.dressing.name</code>.
     */
    public static final UDTField<DressingRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50), DRESSING, "");

    /**
     * The attribute <code>public.dressing.age</code>.
     */
    public static final UDTField<DressingRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER, DRESSING, "");

    /**
     * The attribute <code>public.dressing.address</code>.
     */
    public static final UDTField<DressingRecord, Address> ADDRESS = createField(DSL.name("address"), SQLDataType.JSONB, DRESSING, "", new JSONBtoJacksonConverter<Address>(Address.class));

    /**
     * The attribute <code>public.dressing.address_vec</code>.
     */
    public static final UDTField<DressingRecord, Address[]> ADDRESS_VEC = createField(DSL.name("address_vec"), SQLDataType.JSONB, DRESSING, "", new JSONBtoJacksonConverter<Address[]>(Address[].class));

    /**
     * The attribute <code>public.dressing.address_list</code>.
     */
    public static final UDTField<DressingRecord, List<Address>> ADDRESS_LIST = createField(DSL.name("address_list"), SQLDataType.JSONB, DRESSING, "", new JSONBtoJacksonConverter<List<Address>>((Class<List<Address>>) (Class) List.class));

    /**
     * The attribute <code>public.dressing.costume</code>.
     */
    public static final UDTField<DressingRecord, String> COSTUME = createField(DSL.name("costume"), SQLDataType.VARCHAR(50), DRESSING, "");

    /**
     * No further instances allowed
     */
    private Dressing() {
        super(DSL.name("dressing"), null, null, DSL.comment(""), false);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
